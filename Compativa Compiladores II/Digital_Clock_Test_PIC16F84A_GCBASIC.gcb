'
'  (C) AguHDz 28-OCT-2017
'  Ultima Actualizacion: 01-NOV-2017
'
'  Compilador GCBASIC v.0.97.01 (http://gcbasic.sourceforge.net/)
'
'  Microcontrolador: PIC16F84A
'
'  RELOJ DIGITAL (TEST COMPARACION COMPILADORES)
'  =============================================
'  Este proyecto es una demostración del uso del compilador GCBASIC con
'  el microcontrolador PIC16F84A para hacer un reloj de tiempo real con
'  el integrado DS1307.
'
'  Se trata de un reloj totalmente funcional con tres botones de ajuste
'  SET, INC y DEC.
'
'  Ajuste:
'
'  1. Pulsar SET durante 1 segundo.
'  2. Aparece el cursor bajo los dígitos de año. Pulsar INC para
'     incremetar el año o DEC para decrementarlo. Cada pulsación
'     produce el avance o retroceso de una unidad del digito
'     editado. La pulsación larga permite un avance o retroceso
'     repetitivo haciendo más cómodo el ajuste.
'  3. Pulsar SET para pasar a la edición del mes y proceder del
'     mismo modo que en el ajuste del año pulsando INC o DEC.
'  4. Pulsar SET para ajustar del mismo modo el día del mes, hora,
'     y minutos. (los segundos siempre se inIcian a cero después
'     de cada ajuste)
'  5. Tras ajustar minutos y pulsar SET se pasa a la edición del
'     día de la semana (LUN...DOM). Proceder de igual manera
'     pulsando INC o DEC.
'  6. Pulsar SET para finalizar ajuste. El reloj comienza a funcionar
'     con la nueva hora y día.
'
'  NOTAS:
'  - Durante la edición, llegado al límete inferior o superior del
'    dígito editado se pasa automáticamente al valor inferior o
'    superior. Límites:
'        - Año: 00..99
'        - Mes: 01..12
'        - Día: 01..31 (28, 29 o 30 dependiendo del mes)
'        - Hora: 00..23
'        - Minuto: 00..59
'        - Día de Semana: LUN..DOM
'  - El límite superior del mes de febrero para años bisiestos
'    y los meses de 30 y 31 días los ajusta el programa de manera
'    automática. En caso de error en la edición, corrige el valor
'    de manera automática al límite superior válido para el mes.
'  - El integrado DS1307 es un reloj de tiempo real que funciona
'    de manera autónoma, y que sigue funcionando gracias a su batería
'    sin necesidad de suministro eléctrico exterior, por lo que no es
'    necesario ajustar el reloj cada vez que se desconecta la
'    alimentación. Gracias a su bajo consumo, con una batería
'    tipo botón estándar de 48mAh puede seguir funcionando durante
'    más de 10 años sin necesidad de suministro eléctrico exterior.
'


' ----- Configuration
#chip 16f84A,4           ' uC , Clock = 4 MHz
#config OSC=HS, WDTE=OFF, PWRTE=ON, CP=OFF

#option explicit        ' Todas las variables deben ser declaradas antes de usarse.

'************************************************************************************************'
'******************************** D E F I N I C I O N E S ***************************************'
'************************************************************************************************'
'
' __I/O pin & estados_________________________________________________________
#define INPUT_PIN           1           ' Pin de entrada.
#define OUTPUT_PIN          0           ' Pin de salida.
#define HIGH_ST             1           ' Estado digital alto (HIGH)
#define LOW_ST              0           ' Estado digital bajo (LOW)
'
' __RTC DS1307________________________________________________________________
#define DS1307_CONF         0x90        ' 1 Hz en salida SOUT del DS1307.
#define SOUT                PORTA.3     ' Pin que lee la salida SOUT
'
' __Comunicación I2C__________________________________________________________
#define SDA                 PORTB.0     ' Pin SDA del bus I2C
#define SCL                 PORTB.1     ' Pin SCL del bus I2C
#option volatile            SDA
#option volatile            SCL
#define SDA_HIGH            SDA = 1     ' SDA nivel alto. (HIGH)
#define SDA_LOW             SDA = 0     ' SDA nivel bajo. (LOW)
#define SDA_INPUT           Dir SDA In  ' SDA como entrada.
#define SDA_OUTPUT          Dir SDA Out ' SDA como salida.
#define SCL_OUTPUT          Dir SCL Out ' SCL como salida.
#define SCL_HIGH            SCL = 1     ' SCL nivel alto.
#define SCL_LOW             SCL = 0     ' SCL nivel bajo.
#define I2C_SPEED           10          ' Dependerá de la velocidad de reloj.
'
' __Pulsadores________________________________________________________________
#define P_INC               PORTA.0     ' Pulsador INC
#define P_DEC               PORTA.1     ' Pulsador DEC
#define P_SET               PORTA.2     ' Pulsador SET
#define TIEMPO_ANTIREBOTE   10          ' Milisegundos espera evitar rebote mecánico de pulsador.
#define TIEMPO_REPETICION   500         ' Milisegundos pulsación continua que equivale a otra pulsación.
'
'__Menú de edición de fecha y hora____________________________________________
#define SET_ANO             1
#define SET_MES             2
#define SET_DIA             3
#define SET_HORA            4
#define SET_MINUTO          5
#define SET_DIA_SEM         6
#define SALIR_SET_TIME      7
'
' __Display LCD_______________________________________________________________
' Bus de datos de 4 bits.
#define LCD_DATA_4          PORTB.4     ' Pines de datos
#define LCD_DATA_5          PORTB.5
#define LCD_DATA_6          PORTB.6
#define LCD_DATA_7          PORTB.7
#define LCD_RS              PORTB.2     ' Pin RS
#define LCD_EN              PORTB.3     ' Pin Enable
#option volatile            LCD_RS
#option volatile            LCD_EN
' Valores de RS.
#define LCD_CmdMode   0    ' Indicador envío de Comando (instrucción de configuración)
#define LCD_CharMode  1    ' Indicador envío de Dato (carácter)
' ---------------------------------------------------------------------------
' COMANDOS PARA DISPLAY LCD COMPATIBLE CON ESTANDAR HITACHI HD44780
' ---------------------------------------------------------------------------
#define LCD_CMD_CLEAR_DISPLAY               0x01

#define LCD_CMD_DISPLAY_AND_CURSOR_HOME     0x02

#define LCD_CMD_CHARACTER_ENTRY_MODE        0x04
#define     LCD_CMD_INCREMENT               0x02
#define     LCD_CMD_DECREMENT               0x00
#define     LCD_CMD_DISPLAY_SHIFT_ON        0x01
#define     LCD_CMD_DISPLAY_SHIFT_OFF       0x00

#define LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR   0x08
#define     LCD_CMD_DISPLAY_ON              0x04
#define     LCD_CMD_DISPLAY_OFF             0x00
#define     LCD_CMD_CURSOR_UNDERLINE_ON     0x02
#define     LCD_CMD_CURSOR_UNDERLINE_OFF    0x00
#define     LCD_CMD_CURSOR_BLINK_ON         0x01
#define     LCD_CMD_CURSOR_BLINK_OFF        0x00

#define LCD_CMD_DISPLAY_AND_CURSOR_SHIFT    0x10
#define     LCD_CMD_DISPLAY_SHIFT           0x08
#define     LCD_CMD_CURSOR_MOVE             0x00
#define     LCD_CMD_RIGHT                   0x04
#define     LCD_CMD_LEFT                    0x00

#define LCD_CMD_FUNCTION_SET                0x20
#define     LCD_CMD_8BIT_INTERFACE          0x10
#define     LCD_CMD_4BIT_INTERFACE          0x00
#define     LCD_CMD_2LINES                  0x08
#define     LCD_CMD_1LINE                   0x00
#define     LCD_CMD_F_FONT_5_10             0x02
#define     LCD_CMD_F_FONT_5_8              0x00

#define LCD_CMD_SET_DISPLAY_ADDRESS         0x80
#define     LCD_CMD_ROW_0                   0x00
#define     LCD_CMD_ROW_1                   0x40
#define     LCD_CMD_ROW_2                   0x14
#define     LCD_CMD_ROW_3                   0x54

#define LCD_CMD_SET_CGRAM_ADDRESS           0x40

#define LCD_CURSOR_HOME             LCD_CMD_DISPLAY_AND_CURSOR_HOME
#define LCD_CLEAR                   LCD_CMD_CLEAR_DISPLAY
#define LCD_CURSOR_UNDELINE         LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_ON + LCD_CMD_CURSOR_UNDERLINE_ON
#define LCD_CURSOR_BLINK            LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_ON + LCD_CMD_CURSOR_BLINK_ON
#define LCD_CURSOR_UNDERLINE_BLINK  LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_ON + LCD_CMD_CURSOR_UNDERLINE_ON + LCD_CMD_CURSOR_BLINK_ON
#define LCD_CURSOR_OFF              LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_ON + LCD_CMD_CURSOR_UNDERLINE_OFF + LCD_CMD_CURSOR_BLINK_OFF
#define LCD_ON                      LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_ON
#define LCD_OFF                     LCD_CMD_DISPLAY_ON_OFF_AND_CURSOR + LCD_CMD_DISPLAY_OFF
#define LCD_DISPLAY_SHIFT_RIGHT     LCD_CMD_DISPLAY_AND_CURSOR_SHIFT + LCD_CMD_DISPLAY_SHIFT + LCD_CMD_RIGHT
#define LCD_DISPLAY_SHIFT_LEFT      LCD_CMD_DISPLAY_AND_CURSOR_SHIFT + LCD_CMD_DISPLAY_SHIFT + LCD_CMD_LEFT
#define LCD_DISPLAY_CURSOR_RIGHT    LCD_CMD_DISPLAY_AND_CURSOR_SHIFT + LCD_CMD_CURSOR_MOVE + LCD_CMD_RIGHT
#define LCD_DISPLAY_CURSOR_LEFT     LCD_CMD_DISPLAY_AND_CURSOR_SHIFT + LCD_CMD_CURSOR_MOVE + LCD_CMD_LEFT
' ---------------------------------------------------------------------------


'************************************************************************************************'
'************************** V A R I A B L E S   G L O B A L E S  ********************************'
'************************************************************************************************'
'
' __RTC DS1307________________________________________________________________
Dim  DS1307_DiaSemana As Byte    ' Día de la semana (formato numérico 1..7)
Dim  DS1307_Dia       As Byte    ' Día del mes.
Dim  DS1307_Mes       As Byte    ' Mes del año.
Dim  DS1307_Ano       As Byte    ' Año (solo dos dígitos)
Dim  DS1307_Hora      As Byte    ' Hora del día.
Dim  DS1307_Minuto    As Byte    ' Minuto de la hora.
Dim  DS1307_Segundo   As Byte    ' Segundo del minuto.
'
' __ Menú edición de fecha y hora_____________________________________________
Dim editMenuState     As Byte    ' Posición o estado dentro del menú de edición.


'************************************************************************************************'
'************************** P R O G R A M A   P R I N C I P A L  ********************************'
'************************************************************************************************'

setup

Do Forever
    If P_SET=LOW_ST Then   ' Comprueba si se ha pulsado SET
        editMenuState = SET_ANO
        ' Espera fin pulsación y antirebote mecánico.
        Do While P_SET=LOW_ST
          Wait TIEMPO_ANTIREBOTE ms
        Loop
        timeSet
        DS1307_timeWrite
    End If

    DS1307_timeRead    ' Lee la fecha y hora en el DS1307.
    timeShow           ' Actualiza display LCD con fecha y hora.

    ' Espera 1 segundo usando salida SOUT del DS1307 (1 Hz)
    Do
    Loop While SOUT = 1       ' Espera durante pulso alto.

    Do
    Loop While SOUT = 0       ' Espera durante pulso bajo.

Loop


'************************************************************************************************'
'********************************** F U N C I O N E S *******************************************'
'************************************************************************************************'

'****************************************************************************
'  Funciones de manejo de display LCD 16x4
'*****************************************************************************
Sub LCD_send4Bits(In date As Byte)
    LCD_DATA_4 = date.4
    LCD_DATA_5 = date.5
    LCD_DATA_6 = date.6
    LCD_DATA_7 = date.7
    LCD_EN     = HIGH_ST
    wait 2 ms
    LCD_EN     = LOW_ST
    wait 2 ms
End Sub

Sub LCD_send(In date As Byte)
    LCD_send4Bits(date)
    LCD_send4Bits(FnLSL(date,4))    ' date<<4
End Sub

Sub LCD_command(In comm As Byte)
    LCD_RS = LCD_CmdMode
    LCD_send(comm)
End Sub

Sub LCD_putChar(In char As Byte)
    LCD_RS = LCD_CharMode
    LCD_send(char)
End Sub

Sub LCD_gotoXY(In columna As Byte, In fila As Byte)
  If fila = 0 Then
    LCD_command(LCD_CMD_SET_DISPLAY_ADDRESS + columna + LCD_CMD_ROW_0)
  Else
    LCD_command(LCD_CMD_SET_DISPLAY_ADDRESS + columna + LCD_CMD_ROW_1)
  End if
End Sub

Sub LCD_init
    Dir LCD_DATA_4 Out   ' Pines iniciados como Salidas.
    Dir LCD_DATA_5 Out
    Dir LCD_DATA_6 Out
    Dir LCD_DATA_7 Out
    Dir LCD_RS     Out
    Dir LCD_EN     Out

    wait 200 ms   ' Espera para asegurar tensión estable tras inicio.
    LCD_RS = LOW_ST
    LCD_EN = LOW_ST

    ' INICIALIZACION POR SOFTWARE DE DISPLAY LCD.
    ' Los tiempos de espera y secuencia de datos son los indicados en todos los
    ' datasheets de los displays compatibles con el estándar Hitachi HD44780.
    wait 30 ms    ' Espera >= 15 ms
    ' INICIACION DE DISPLAY MODO 4 BITS DE DATOS.
    LCD_send4Bits(0b00110000)
    wait 5 ms    ' Espera >= 4.1 ms
    LCD_send4Bits(0b00110000)
    wait 1 ms     ' Espera >= 100 us
    LCD_send4Bits(0b00110000)
    LCD_send4Bits(0b00100000)
    LCD_command(LCD_CMD_FUNCTION_SET + LCD_CMD_4BIT_INTERFACE + LCD_CMD_2LINES + LCD_CMD_F_FONT_5_8)
    ' FIN DE INICIALIZACION POR SOFTWARE DEL DISPLAY LCD.

    ' CONFIGURACION DE DISPLAY LCD.
    LCD_command(LCD_OFF)
    LCD_command(LCD_CMD_CHARACTER_ENTRY_MODE + LCD_CMD_INCREMENT + LCD_CMD_DISPLAY_SHIFT_OFF)
    LCD_command(LCD_ON)
    LCD_command(LCD_CLEAR)
End Sub

'****************************************************************************
'  Funciones de comunicación I2C mediante software.
'****************************************************************************
Sub I2C__Start             ' START function for communicate I2C
    SDA_HIGH
    SCL_HIGH
    SCL_OUTPUT             ' Configura pines I2C como Salidas.
    SDA_OUTPUT
    SDA_LOW
    SCL_LOW
End Sub

Sub I2C__Stop            ' STOP function for communicate I2C
    SDA_LOW
    SCL_HIGH
    SDA_HIGH
End Sub

Function I2C_writeByte(In dato As Byte) As Bit     ' Send data to I2C
    Dim LoopCounter As Byte

    for LoopCounter = 0 to 7
        SDA = (FnLSL(dato,LoopCounter).7)
        SCL_HIGH
        SCL_LOW
    Next

    SDA_INPUT
    SCL_HIGH
    I2C_writeByte = SDA
    SCL_LOW
    SDA_OUTPUT
    SDA_LOW
End Function

Function I2C_readByte(In ACKBit As Bit) As Byte   ' Receive data from I2C
    Dim LoopCounter As Byte

    I2C_readByte = 0
    SDA_INPUT
    for LoopCounter = 0 To 7
        SCL_HIGH
        Rotate I2C_readByte Left           ' dato<<=1
        I2C_readByte.0 = SDA
        SCL_LOW
    Next

    SDA_OUTPUT
    SDA = Not ACKBit
    SCL_HIGH
    SCL_LOW
End Function

'****************************************************************************
'  - Función: BCDToDecimal
'  - Descripción: Transforma un número en formato BCD a Decimal.
'  - Entrada:
'      > bcdByte: Número en formato BCD
'  - Salida: Número en formato Decimal.
'*****************************************************************************
Function BCDToDecimal(In bcdByte As Byte) As Byte
  BCDToDecimal = 0
  Do While bcdByte > 0x09
    bcdByte      -= 0x10
    BCDToDecimal += 10
  Loop
  BCDToDecimal += bcdByte    ' Suma el resto <= 0x09.
End Function

'****************************************************************************
'  - Función: decimalToBCD
'  - Descripción: Transforma un número en formato Decimal a BCD.
'  - Entrada:
'      > decimalByte: Número en formato Decimal
'  - Salida: Número en formato BCD.
'****************************************************************************
Function decimalToBCD (In decimalByte As Byte) As Byte
  decimalToBCD = 0
  Do While decimalByte > 9
    decimalToBCD += 0x10
    decimalByte  -= 10
  Loop
  decimalToBCD += decimalByte    ' Suma el resto <= 9.
End Function

'****************************************************************************
'  - Función: DS1307_timeRead
'  - Descripción: Lee fecha y hora del DS1307 a través del bus I2C.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'****************************************************************************
Sub DS1307_timeRead
    I2C__Start           ' Inicia comunicación I2C.
    I2C_writeByte(0xD0)  ' Dirección I2C del DS1307.
    I2C_writeByte(0x00)  ' Primera dirección a leer/escribir.
    I2C__Start           ' Reinicia comunicación I2C.
    I2C_writeByte(0xD1)  ' DS1307 en Modo Escritura.
    DS1307_Segundo   = BCDToDecimal(I2C_readByte(true)) ' ASK = 1
    DS1307_Minuto    = BCDToDecimal(I2C_readByte(true))
    DS1307_Hora      = BCDToDecimal(I2C_readByte(true))
    DS1307_DiaSemana = I2C_readByte(true)  ' Valor 1...7 (igual en decimal que en BCD)
    DS1307_Dia       = BCDToDecimal(I2C_readByte(true))
    DS1307_Mes       = BCDToDecimal(I2C_readByte(true))
    DS1307_Ano       = BCDToDecimal(I2C_readByte(false)) ' ASK = 0
            ' El último ASK antes del Stop debe ser sea cero (/ASK).
    I2C__Stop
End Sub

'****************************************************************************
'  - Función: DS1307_timeWrite
'  - Descripción: Escribe fecha y hora en el DS1307 a través del bus I2C.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'****************************************************************************
Sub DS1307_timeWrite
    I2C__Start           ' Inicia comunicación I2C
    I2C_writeByte(0xD0)  ' Dirección I2C del DS1307.
    I2C_writeByte(0x00)  ' Primera dirección a leer/escribir.
    I2C_writeByte(0)     ' Siempre que se ajusta la fecha y hora los Segundos=0.
    I2C_writeByte(decimalToBCD(DS1307_Minuto))
    I2C_writeByte(decimalToBCD(DS1307_Hora))
    I2C_writeByte(DS1307_DiaSemana)  ' Valor 1...7 (igual en decimal que en BCD)
    I2C_writeByte(decimalToBCD(DS1307_Dia))
    I2C_writeByte(decimalToBCD(DS1307_Mes))
    I2C_writeByte(decimalToBCD(DS1307_Ano))
    I2C__Stop
End Sub

'****************************************************************************
'  - Función: LCDPrintDiaSemana
'  - Descripción: Muesta en display LCD el día de la semana actual en
'    formato texto.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'*****************************************************************************
Sub LCDPrintDiaSemana
    Select Case DS1307_DiaSemana
    Case 1
        LCD_putChar("D")
        LCD_putChar("O")
        LCD_putChar("M")
    Case 2
        LCD_putChar("L")
        LCD_putChar("U")
        LCD_putChar("N")
    Case 3
        LCD_putChar("M")
        LCD_putChar("A")
        LCD_putChar("R")
    Case 4
        LCD_putChar("M")
        LCD_putChar("I")
        LCD_putChar("E")
    Case 5
        LCD_putChar("J")
        LCD_putChar("U")
        LCD_putChar("E")
    Case 6
        LCD_putChar("V")
        LCD_putChar("I")
        LCD_putChar("E")
    Case 7
        LCD_putChar("S")
        LCD_putChar("A")
        LCD_putChar("B")
    End Select
End Sub


'****************************************************************************
'  - Función: bisiesto
'  - Descripción: Comprueba si el año actual es bisiesto [margen de 2000 a 2099].
'      Para otros márgenes de años, habría que aplicar el algoritmo genérico
'      teniendo en cuenta los años múltiplos de 100 o 400.
'  - NOTAS: Detalle curioso. Para siglos anteriores al XX, habría que tener en
'      cuenta que en España y otros países catolicos el mes de octubre de 1582
'      sólo tuvo 20 días. Ese mes, el día siguiente al jueves 4 fue viernes 15.
'      En el resto del mundo, el cambio fue produciendose en los siguientes
'      siglos (hasta el XX). Por ejemplo, en Inglaterra y colonias fue en 1752
'      (el día siguiente al 03/09/1752 fue 14/091782). Este cambio introdujo
'      las reglas actuales para los años multiplos de 100 y 400.
'  - Entrada: Ninguna.
'  - Salida:
'      > Devuelve 1 si el año es bisiesto, y 0 si no lo es.
'*****************************************************************************
Function bisiesto As Bit
' Devuelve 0 si (DS1307_timeAno%4)!=0, y 1 si (DS1307_timeAno%4)==0
  Dim dato As Byte

  dato = DS1307_Ano
  Do While dato >= 4
    dato -= 4
  Loop

  If (dato = 0) Then
    bisiesto = true
  Else
    bisiesto = false
  End If
End Function

'****************************************************************************
'  - Función: diasDelMes
'  - Descripción: Devuelve el número de días de cualquier mes del año actual.
'  - Entrada: Ninguna.
'  - Salida:
'      > Número en días del mes.
'****************************************************************************
Function diasDelMes As Byte
    If DS1307_Mes = 2 Then        ' Mes = febrero
        If bisiesto Then
          diasDelMes = 29
        Else
          diasDelMes = 28
        End If                    ' Bisiesto: 29 días / No bisiesto: 28 días.
    Else
        If (DS1307_Mes=4) OR (DS1307_Mes=6) OR (DS1307_Mes=9) OR (DS1307_Mes=11) Then
          diasDelMes = 30         ' Meses de 30 días.
        Else
          diasDelMes = 31         ' Meses de 31 días.
        End If
    End If
End Function

'****************************************************************************
'  - Función: LCDPrintNumero
'  - Descripción: Imprime en la pantalla LCD un número de 2 dígitos.
'  - Entrada:
'      > numero: Número entre 0 y 99 a imprimir.
'  - Salida: Ninguna.
'****************************************************************************
Sub LCDPrintNumero(In numero As Byte)
    numero = decimalToBCD(numero)
    LCD_putChar(FnLSR(numero,4) + 48)
    LCD_putChar((numero & 0x0F) + 48)
End Sub

'****************************************************************************
'  - Función: timeShow
'  - Descripción: Muestra en el display LCD la fecha y hora.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'****************************************************************************
Sub timeShow
    LCD_gotoXY(1,0)
    LCDPrintNumero(DS1307_Dia)
    LCD_putChar("/")
    LCDPrintNumero(DS1307_Mes)
    LCD_putChar("/")
    LCDPrintNumero(DS1307_Ano)
    LCD_putChar(" ")
    LCD_putChar(" ")
    LCD_putChar(" ")
    LCDPrintDiaSemana
    LCD_gotoXY(1,1)
    LCDPrintNumero(DS1307_Hora)
    LCD_putChar(":")
    LCDPrintNumero(DS1307_Minuto)
    LCD_putChar(":")
    LCDPrintNumero(DS1307_Segundo)
End Sub

'****************************************************************************
'  - Función: cicloTimeSet
'  - Descripción: Subfunción de la función timeRead() que edita las variables
'    del día y hora del reloj.
'  - Entrada:
'      > limInf   : Límite Inferior de la variable editada.
'      > limSup   : Límite Superior de la variable editada.
'      > lcdX     : Posición X del display en la que se muestra la variable.
'      > lcdY     : Posición Y (fila) del display en la que se muestra la variable.
'      > editDato : Dato editado (es devuelto en esta variable).
'  - Salida: Ninguna.
'****************************************************************************
Sub cicloTimeSet(In limInf As Byte, In limSup As Byte, In lcdX As Byte, In lcdY As Byte, editDato As Byte)
    Do While (P_INC AND P_DEC)=LOW_ST  ' Si se pulsa INC o DEC.
        LCD_command(LCD_CURSOR_OFF)
        If P_INC=LOW_ST Then           ' Se ha pulsado INC.
            editDato++
            If editdato>limSup Then
              editDato=limInf  ' Controla que no se supere el límite superior.
            End If
        Else                    ' Se ha pulsado DEC.
            editDato--
            If (editDato<limInf) OR (editDato=0xFF) Then editDato=limSup ' Si limInf==0 (*editDato)-- puede ser 0xFF.
        End If
        LCD_gotoXY(lcdX, lcdY)            ' Coloca el cursor en la posición de inicio de impresión del dato editado.
        If editMenuState = SET_DIA_SEM Then
          DS1307_DiaSemana = editDato
          LCDPrintDiaSemana  ' Si se está editando del día de la semana, se imprime el texto.
        Else
          LCDPrintNumero(editDato)        ' El resto son variables numéricas de 2 dígitos.
        End If
        Wait TIEMPO_REPETICION ms       ' Espera el tiempo de autorepetición de la tecla pulsada.
    Loop

    If P_SET=LOW_ST Then                ' Si se pulsa SET.
        editMenuState++
        Do While P_SET=LOW_ST
          wait TIEMPO_ANTIREBOTE ms  ' Espera antirebote mecánico del pulsador.
        Loop
        if editDato>limSup then editDato=limSup  ' Evita posible bug al modificar el año o el mes, si
        ' no se modifica el día y en ese año o mes ya no es válido.
    End If

    If editMenuState = SET_DIA_SEM Then lcdX++ ' Si se está editando el día de la semana, se desplaza el cursor
                                               ' una posición más, ya que el texto ocupa 3 posiciones, en lugar
                                               ' de dos como el resto de variables.
    lcdX++
    LCD_gotoXY(lcdX, lcdY)  ' Coloca el cursor en la parte izquierda de la variable editada.
    LCD_command(LCD_CURSOR_UNDELINE)       ' Cursor On
End Sub

'****************************************************************************
'  - Función: timeRead
'  - Descripción: Set fecha y hora mediante pulsadores y cursor en display LCD.
'    Programado según la lógica de una "máquina de estado". La variable global
'    editMenuState indica la posición del cursor dentro del bucle de fijación de fecha y
'    hora.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'****************************************************************************
Sub timeSet
    LCD_gotoXY(7,1)           ' Goto posición de Segundos en display.
    LCDPrintNumero(0)         ' 00 en posición de Segundos del display.
    LCD_Command(LCD_CURSOR_UNDELINE)       ' Cursor On
    Do While editMenuState<SALIR_SET_TIME
        Do while editMenuState=SET_ANO
          cicloTimeSet(0,99,7,0,DS1307_Ano)            ' Set año.
        Loop
        Do while editMenuState=SET_MES
          cicloTimeSet(1,12,4,0,DS1307_Mes)            ' Set mes.
        Loop
        Do while editMenuState=SET_DIA
          cicloTimeSet(1,diasDelMes,1,0,DS1307_Dia)    ' Set día.
        Loop
        Do while editMenuState=SET_HORA
          cicloTimeSet(0,23,1,1,DS1307_Hora)           ' Set hora.
        Loop
        Do while editMenuState=SET_MINUTO
          cicloTimeSet(0,59,4,1,DS1307_Minuto)         ' Set minutos.
        Loop
        Do while editMenuState=SET_DIA_SEM
          cicloTimeSet(1,7,12,0,DS1307_DiaSemana)      ' Set día de la semana.
        Loop
    Loop
    LCD_Command(LCD_CURSOR_OFF)
End Sub

'****************************************************************************
'  - Función: Setup
'  - Descripción: Inicializa Microcontrolador y Hardware externo conectado.
'  - Entrada: Ninguna.
'  - Salida: Ninguna.
'****************************************************************************
Sub setup
    GIE    = 0             ' Todas las interrupciones desactivadas.

    Dir P_INC In           ' Configura Pulsadores como Entradas.
    Dir P_DEC In
    Dir P_SET In
    Dir SOUT  In

    I2C__Start            ' Inicia comunicación I2C
    I2C_writeByte(0xD0)         ' Dirección I2C del DS1307.
    I2C_writeByte(0x07)         ' Escribe en la dirección 07h.
    I2C_writeByte(DS1307_CONF)  ' Configura 1 Hz en salida SOUT del DS1307
    I2C__Stop

    LCD_init             ' Inicializa display LCD.
End Sub
